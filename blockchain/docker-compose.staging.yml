version: '3.8'

services:
  # PostgreSQL database for transaction indexing and wallet storage
  postgres:
    image: postgres:15-alpine
    container_name: tourist-rewards-postgres-staging
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tourist_rewards_staging}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tourist-rewards-network
    restart: unless-stopped

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: tourist-rewards-redis-staging
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tourist-rewards-network
    restart: unless-stopped

  # API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: tourist-rewards-api-staging
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-tourist_rewards_staging}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379
      - RPC_URL=${RPC_URL}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - ADMIN_PRIVATE_KEY=${ADMIN_PRIVATE_KEY}
      - API_PORT=3000
      - LOG_LEVEL=info
      - API_KEY=${API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run start
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - tourist-rewards-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Transaction monitoring service
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: tourist-rewards-monitoring-staging
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-tourist_rewards_staging}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379
      - RPC_URL=${RPC_URL}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: node dist/scripts/monitoring-cli.js
    networks:
      - tourist-rewards-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: tourist-rewards-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - tourist-rewards-network
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local

networks:
  tourist-rewards-network:
    driver: bridge
    name: tourist-rewards-staging